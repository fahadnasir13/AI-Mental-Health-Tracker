// Advanced Export Service for PDF Reports and Data Export
import jsPDF from 'jspdf'
import html2canvas from 'html2canvas'
import { MoodLog } from './supabase'
import { format, startOfWeek, endOfWeek, startOfMonth, endOfMonth } from 'date-fns'

export interface ExportOptions {
  format: 'pdf' | 'json' | 'csv'
  dateRange: 'week' | 'month' | 'all'
  includeJournal: boolean
  includeAIResponses: boolean
  includeCharts: boolean
}

class ExportService {
  async exportData(logs: MoodLog[], options: ExportOptions): Promise<void> {
    const filteredLogs = this.filterLogsByDateRange(logs, options.dateRange)
    
    switch (options.format) {
      case 'pdf':
        await this.exportToPDF(filteredLogs, options)
        break
      case 'json':
        this.exportToJSON(filteredLogs, options)
        break
      case 'csv':
        this.exportToCSV(filteredLogs, options)
        break
    }
  }

  private filterLogsByDateRange(logs: MoodLog[], range: string): MoodLog[] {
    const now = new Date()
    
    switch (range) {
      case 'week':
        const weekStart = startOfWeek(now)
        const weekEnd = endOfWeek(now)
        return logs.filter(log => {
          const logDate = new Date(log.created_at)
          return logDate >= weekStart && logDate <= weekEnd
        })
      
      case 'month':
        const monthStart = startOfMonth(now)
        const monthEnd = endOfMonth(now)
        return logs.filter(log => {
          const logDate = new Date(log.created_at)
          return logDate >= monthStart && logDate <= monthEnd
        })
      
      default:
        return logs
    }
  }

  private async exportToPDF(logs: MoodLog[], options: ExportOptions): Promise<void> {
    const pdf = new jsPDF()
    const pageWidth = pdf.internal.pageSize.getWidth()
    const pageHeight = pdf.internal.pageSize.getHeight()
    let yPosition = 20

    // Header
    pdf.setFontSize(20)
    pdf.setTextColor(59, 130, 246) // Blue color
    pdf.text('MindFlow AI - Mental Health Report', pageWidth / 2, yPosition, { align: 'center' })
    yPosition += 20

    // Date range
    pdf.setFontSize(12)
    pdf.setTextColor(100, 100, 100)
    const dateRange = this.getDateRangeText(options.dateRange)
    pdf.text(`Report Period: ${dateRange}`, pageWidth / 2, yPosition, { align: 'center' })
    yPosition += 20

    // Summary statistics
    const stats = this.calculateStats(logs)
    pdf.setFontSize(14)
    pdf.setTextColor(0, 0, 0)
    pdf.text('Summary Statistics', 20, yPosition)
    yPosition += 15

    pdf.setFontSize(11)
    const summaryText = [
      `Total Entries: ${stats.totalEntries}`,
      `Average Mood: ${stats.averageMood}/10`,
      `Most Common Stress Level: ${stats.mostCommonStress}`,
      `Journal Entries: ${stats.journalEntries}`,
      `AI Interactions: ${stats.aiInteractions}`
    ]

    summaryText.forEach(text => {
      pdf.text(text, 20, yPosition)
      yPosition += 8
    })

    yPosition += 10

    // Mood entries
    if (logs.length > 0) {
      pdf.setFontSize(14)
      pdf.text('Mood Entries', 20, yPosition)
      yPosition += 15

      logs.forEach((log, index) => {
        if (yPosition > pageHeight - 40) {
          pdf.addPage()
          yPosition = 20
        }

        pdf.setFontSize(11)
        pdf.setTextColor(0, 0, 0)
        
        const date = format(new Date(log.created_at), 'MMM dd, yyyy - h:mm a')
        pdf.text(`${date} - Mood: ${log.mood}/10 - Stress: ${log.stress_level}`, 20, yPosition)
        yPosition += 10

        if (options.includeJournal && log.journal_entry) {
          pdf.setTextColor(60, 60, 60)
          const journalLines = pdf.splitTextToSize(log.journal_entry, pageWidth - 40)
          pdf.text(journalLines, 20, yPosition)
          yPosition += journalLines.length * 5 + 5
        }

        if (options.includeAIResponses && log.ai_response) {
          pdf.setTextColor(59, 130, 246)
          pdf.text('AI Response:', 20, yPosition)
          yPosition += 8
          
          pdf.setTextColor(80, 80, 80)
          const aiLines = pdf.splitTextToSize(log.ai_response, pageWidth - 40)
          pdf.text(aiLines, 20, yPosition)
          yPosition += aiLines.length * 5 + 10
        }

        yPosition += 5
      })
    }

    // Charts (if requested)
    if (options.includeCharts) {
      await this.addChartsToPDF(pdf, logs)
    }

    // Footer
    const totalPages = pdf.internal.pages.length - 1
    for (let i = 1; i <= totalPages; i++) {
      pdf.setPage(i)
      pdf.setFontSize(8)
      pdf.setTextColor(150, 150, 150)
      pdf.text(
        `Generated by MindFlow AI - Page ${i} of ${totalPages}`,
        pageWidth / 2,
        pageHeight - 10,
        { align: 'center' }
      )
    }

    // Save the PDF
    const filename = `mental-health-report-${format(new Date(), 'yyyy-MM-dd')}.pdf`
    pdf.save(filename)
  }

  private async addChartsToPDF(pdf: jsPDF, logs: MoodLog[]): Promise<void> {
    // This would capture chart elements and add them to PDF
    // For now, we'll add a placeholder
    pdf.addPage()
    pdf.setFontSize(16)
    pdf.text('Mood Trends Chart', 20, 30)
    pdf.setFontSize(10)
    pdf.text('Chart visualization would appear here in full implementation', 20, 50)
  }

  private exportToJSON(logs: MoodLog[], options: ExportOptions): void {
    const exportData = {
      exportDate: new Date().toISOString(),
      dateRange: options.dateRange,
      totalEntries: logs.length,
      data: logs.map(log => ({
        date: log.created_at,
        mood: log.mood,
        stressLevel: log.stress_level,
        ...(options.includeJournal && { journalEntry: log.journal_entry }),
        ...(options.includeAIResponses && { aiResponse: log.ai_response })
      }))
    }

    const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `mental-health-data-${format(new Date(), 'yyyy-MM-dd')}.json`
    a.click()
    URL.revokeObjectURL(url)
  }

  private exportToCSV(logs: MoodLog[], options: ExportOptions): void {
    const headers = ['Date', 'Mood', 'Stress Level']
    if (options.includeJournal) headers.push('Journal Entry')
    if (options.includeAIResponses) headers.push('AI Response')

    const csvContent = [
      headers.join(','),
      ...logs.map(log => {
        const row = [
          `"${format(new Date(log.created_at), 'yyyy-MM-dd HH:mm:ss')}"`,
          log.mood,
          `"${log.stress_level}"`
        ]
        
        if (options.includeJournal) {
          row.push(`"${(log.journal_entry || '').replace(/"/g, '""')}"`)
        }
        
        if (options.includeAIResponses) {
          row.push(`"${(log.ai_response || '').replace(/"/g, '""')}"`)
        }
        
        return row.join(',')
      })
    ].join('\n')

    const blob = new Blob([csvContent], { type: 'text/csv' })
    const url = URL.createObjectURL(blob)
    const a = document.createElement('a')
    a.href = url
    a.download = `mental-health-data-${format(new Date(), 'yyyy-MM-dd')}.csv`
    a.click()
    URL.revokeObjectURL(url)
  }

  private calculateStats(logs: MoodLog[]) {
    const totalEntries = logs.length
    const averageMood = logs.length > 0 
      ? Math.round((logs.reduce((sum, log) => sum + log.mood, 0) / logs.length) * 10) / 10 
      : 0
    
    const stressLevels = logs.map(log => log.stress_level)
    const stressCounts = {
      low: stressLevels.filter(s => s === 'low').length,
      medium: stressLevels.filter(s => s === 'medium').length,
      high: stressLevels.filter(s => s === 'high').length
    }
    
    const mostCommonStress = Object.entries(stressCounts)
      .sort(([,a], [,b]) => b - a)[0][0]
    
    const journalEntries = logs.filter(log => log.journal_entry).length
    const aiInteractions = logs.filter(log => log.ai_response).length

    return {
      totalEntries,
      averageMood,
      mostCommonStress,
      journalEntries,
      aiInteractions
    }
  }

  private getDateRangeText(range: string): string {
    const now = new Date()
    
    switch (range) {
      case 'week':
        return `${format(startOfWeek(now), 'MMM dd')} - ${format(endOfWeek(now), 'MMM dd, yyyy')}`
      case 'month':
        return format(now, 'MMMM yyyy')
      default:
        return 'All time'
    }
  }
}

export const exportService = new ExportService()